# AllocationManager Tree (**** denotes taht integration tests are needed to fully validate path)
# when setAllocationDelay is called by the operator
## given that the caller is not an operator in the delegationManager
### it should revert
## given that the delay is set to 0
### it should revert
## given that a previous delay is set and has passed
### it should set the new delay to the previous delay
## given the caller provides a valid delay
### given that a previous delay is set and has passed
#### it should set the new delay to the previous delay delay
### given that a previous delay is set and has not passed
#### it should should overwrite the previous pending delay with the new delay
### it should set the pendingDelay, update the effectTimestamp, and emit an `AllocationDelaySetEvent`
# when setAllocationDelay is called by the delegationManager
## given that the caller is not the delegationManager
### it should revert
## given that the delay is set to 0
### it should revert
## given that a previous delay is set and has passed
### it should set the new delay to the previous delay
## given the caller provides a valid delay
### given that a previous delay is set and has passed
#### it should set the new delay to the previous delay delay
### given that a previous delay is set and has not passed
#### it should should overwrite the previous pending delay with the new delay
### it should set the pendingDelay, update the effectTimestamp, and emit an `AllocationDelaySetEvent`
# when clearModificationQueue is called 
## given that the length of the strategies and numToClear are not equal
### it should revert 
## given that the operator is registered in the delegationManager
### it should revert 
## given that there are no modifications OR numToClear is 0
### no modifications should be cleared
## it should loop through the modification queue and the numToClear
### given that the latest effect timestamp has not been reached
#### it should break the loop
### given that the latest effect timestamp has been reached
#### it should update the magnitude info to the currentMagnitude, with a pendingDiff of 0 and effectTimestamp of 0
#### it should emit an event for encumbered magnitude AND change the encumbered magnitude the pendingDiff was less than 0. 
#### it should remove the modification from the queue & continue to pop more off the queue
